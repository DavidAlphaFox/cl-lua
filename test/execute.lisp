(defpackage :cl-lua-test.execute
  (:use :cl :cl-lua)
  (:export :test))
(in-package :cl-lua-test.execute)

(defun assert-test ()
  (prove:is-values (run-string "assert(1==1)")
                   (list cl-lua.runtime:+lua-true+)
                   :test #'equal)
  (prove:is-values (run-string "assert(1==1, 1, 2)")
                   (list cl-lua.runtime:+lua-true+ 1 2)
                   :test #'equal)
  (prove:is-values (run-string "assert(1==1, 'a', 'b')")
                   (list cl-lua.runtime:+lua-true+ #L"a" #L"b")
                   :test #'equal)
  (prove:is-error (run-string "assert(1==2)") 'cl-lua.error:runtime-error)
  (handler-case (run-string "assert(1==2, 'message')")
    (error (condition)
      (prove:is-type condition 'cl-lua.error:runtime-error)
      (prove:is (cl-lua.error::runtime-error-object condition)
                #L"message"))))

(defun test ()
  (prove:plan nil)
  (prove:is (run-string "x=3; return _ENV['x']") 3)
  (prove:is (run-string "x=3; return _ENV[ [[x]] ]") 3)
  (assert-test)
  (prove:finalize))
