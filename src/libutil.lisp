(in-package :cl-user)
(defpackage :cl-lua.libutil
  (:use :cl :cl-lua.util :cl-lua.lua-object :cl-lua.runtime)
  (:export :define-lua-function))
(in-package :cl-lua.libutil)

(eval-when (:compile-toplevel :load-toplevel :execute)
  (defun convert-parameters (parameters)
    (let ((acc)
          (optional-p)
          (vars))
      (flet ((var (x)
               (push x vars)
               x))
        (do ((parm-rest parameters (cdr parm-rest)))
            ((null parm-rest)
             (push '&rest acc)
             (push (var (gensym)) acc))
          (cond ((eq (car parm-rest) '&rest)
                 (assert (length=1 (cdr parm-rest)))
                 (check-type (cadr parm-rest) symbol)
                 (dolist (p parm-rest)
                   (push p acc))
                 (return))
                (t
                 (check-type (car parm-rest) symbol)
                 (setf optional-p t)
                 (push `(,(var (car parm-rest)) +lua-nil+) acc))))
        (values (if optional-p
                    (cons '&optional (nreverse acc))
                    (nreverse acc))
                vars)))))

(defmacro define-lua-function (name parameters &body body)
  (check-type name string)
  (multiple-value-bind (lambda-list vars)
      (convert-parameters parameters)
    `(set-global-variable (string-to-lua-string ,name)
                          #'(lambda ,lambda-list
                              (declare (ignorable ,@vars))
                              ,@body))))
